# app.py

import os
from flask import Flask, jsonify, request
import requests
import redis
from flask_caching import Cache
from indicators import calculate_signals

app = Flask(__name__)

# Configuration for Redis Cache
app.config['CACHE_TYPE'] = 'RedisCache'
app.config['CACHE_REDIS_HOST'] = 'localhost'
app.config['CACHE_REDIS_PORT'] = 6379
cache = Cache(app)

# OANDA API credentials
OANDA_API_URL = "https://api-fxtrade.oanda.com/v3/instruments"
OANDA_API_KEY = os.getenv('OANDA_API_KEY')  # Store the API key securely

# Redis connection
redis_conn = redis.Redis(host='localhost', port=6379)

# Endpoint to fetch live trading signals
@app.route('/api/signals', methods=['GET'])
def get_trading_signals():
    pair = request.args.get('pair', 'EUR/USD')
    timeframe = request.args.get('timeframe', 'M1')

    # Check if cached data exists for this pair
    cached_signals = redis_conn.get(f"signals_{pair}_{timeframe}")
    if cached_signals:
        return jsonify({'signals': cached_signals.decode('utf-8')})

    # Fetch price data from OANDA API
    candles_url = f"{OANDA_API_URL}/{pair}/candles"
    headers = {
        'Authorization': f"Bearer {OANDA_API_KEY}"
    }
    params = {
        'granularity': timeframe
    }
    response = requests.get(candles_url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()

        # Process indicators
        signals = calculate_signals(data['candles'])

        # Cache the result in Redis
        redis_conn.set(f"signals_{pair}_{timeframe}", signals, ex=60)

        return jsonify({'signals': signals})

    return jsonify({'error': 'Failed to fetch data from OANDA'}), 500

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
